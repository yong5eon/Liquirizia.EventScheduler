# -*- coding: utf-8 -*-

from Liquirizia.EventRunner import EventRunnerProperties
from Liquirizia.EventRunner.Types import EventTimer
from Liquirizia.EventRunner.Errors import InvalidBodyError

from Liquirizia.Validator import Validator, Error, Pattern
from Liquirizia.Validator.Patterns import *

from SampleEventRunnerSub import SampleEventRunnerSub
from SampleEventRunnerComplete import SampleEventRunnerComplete
from SampleEventRunnerError import SampleEventRunnerError


class IsGreaterThan(Pattern):
	def __init__(self, error: Error = None):
		self.error = error
		return

	def __call__(self, parameter):
		if not parameter['a'] > parameter['b']:
			if self.error:
				raise self.error(parameter)
			raise RuntimeError('a must be greater than b')
		return parameter


properties = EventRunnerProperties(
	SampleEventRunnerSub,
	type=EventTimer('event.sample.compute.sub', '*/10 * * * * *', headers={'c': 9}, body={'a': 10, 'b': 4}),
	body=Validator(
		IsDictionary(
			IsMappingOf({
				'a': Validator(IsInteger(error=InvalidBodyError('a 는 정수 이어야 합니다.'))),
				'b': Validator(IsInteger(error=InvalidBodyError('b 는 정수 이어야 합니다.'))),
				},
				error=InvalidBodyError('올바르지 않은 형식 입니다.')
			),
			IsGreaterThan(error=InvalidBodyError('a 는 b 보다 커야 합니다.'))
		)
	),
	completes=SampleEventRunnerComplete('event.sample.compute.sub.complete'),
	errors=(
		SampleEventRunnerError('event.sample.compute.sub.error.1'),
		SampleEventRunnerError('event.sample.compute.sub.error.2'),
	)
)
